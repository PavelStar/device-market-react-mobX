{"ast":null,"code":"import _toConsumableArray from\"C:/Users/Pavel/Desktop/js/device-market-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{observer}from\"mobx-react-lite\";import React from\"react\";import FiltersSettingsState from\"../../../store/FiltersSettingsState\";import\"./CheckboxCategory.scss\";import\"../checbox.scss\";import MarkerIcon from\"../../svg/MarkerIcon\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CheckboxCategory=observer(function(_ref){var category=_ref.category;var selectedCategories=FiltersSettingsState.selectedCategories;var categoryName=category.categoryName;var addCategory=function addCategory(){if(!selectedCategories.includes(category.categoryName)){FiltersSettingsState.setSelectedCategories(_toConsumableArray(selectedCategories.concat(category.categoryName)));}if(selectedCategories.includes(category.categoryName)){FiltersSettingsState.setSelectedCategories(_toConsumableArray(selectedCategories.concat(category.categoryName)));FiltersSettingsState.setSelectedCategories(selectedCategories.filter(function(item){return item!=categoryName;}));}};return/*#__PURE__*/_jsxs(\"div\",{className:\"checkbox-wrapper\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"visually-hidden\",id:categoryName,type:\"checkbox\",name:\"category-item\",checked:selectedCategories.includes(categoryName)?true:false,onChange:addCategory}),/*#__PURE__*/_jsx(\"div\",{className:\"checkbox-border\",children:/*#__PURE__*/_jsx(MarkerIcon,{})}),/*#__PURE__*/_jsx(\"label\",{className:\"filter-checkbox\",htmlFor:categoryName,children:categoryName})]});});export default CheckboxCategory;","map":{"version":3,"sources":["C:/Users/Pavel/Desktop/js/device-market-master/client/src/components/FiltersPanel/CheckboxCategory/CheckboxCategory.tsx"],"names":["observer","React","FiltersSettingsState","MarkerIcon","CheckboxCategory","category","selectedCategories","categoryName","addCategory","includes","setSelectedCategories","concat","filter","item"],"mappings":"oLACA,OAASA,QAAT,KAAyB,iBAAzB,CACA,MAAOC,CAAAA,KAAP,KAAmD,OAAnD,CAEA,MAAOC,CAAAA,oBAAP,KAAiC,qCAAjC,CACA,MAAO,yBAAP,CACA,MAAO,iBAAP,CACA,MAAOC,CAAAA,UAAP,KAAuB,sBAAvB,C,wFAOA,GAAMC,CAAAA,gBAA0C,CAAGJ,QAAQ,CAAC,cAAkB,IAAfK,CAAAA,QAAe,MAAfA,QAAe,CAE1E,GAAQC,CAAAA,kBAAR,CAA+BJ,oBAA/B,CAAQI,kBAAR,CAEA,GAAQC,CAAAA,YAAR,CAAyBF,QAAzB,CAAQE,YAAR,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACtB,GAAI,CAACF,kBAAkB,CAACG,QAAnB,CAA4BJ,QAAQ,CAACE,YAArC,CAAL,CAAyD,CACrDL,oBAAoB,CAACQ,qBAArB,oBAA+CJ,kBAAkB,CAACK,MAAnB,CAA0BN,QAAQ,CAACE,YAAnC,CAA/C,GACH,CAED,GAAID,kBAAkB,CAACG,QAAnB,CAA4BJ,QAAQ,CAACE,YAArC,CAAJ,CAAwD,CACpDL,oBAAoB,CAACQ,qBAArB,oBAA+CJ,kBAAkB,CAACK,MAAnB,CAA0BN,QAAQ,CAACE,YAAnC,CAA/C,GACAL,oBAAoB,CAACQ,qBAArB,CAA2CJ,kBAAkB,CAACM,MAAnB,CAA0B,SAACC,IAAD,CAAU,CAC3E,MAAOA,CAAAA,IAAI,EAAIN,YAAf,CACH,CAF0C,CAA3C,EAIH,CACJ,CAZD,CAkBA,mBACI,aAAK,SAAS,CAAC,kBAAf,wBACI,cACI,SAAS,CAAC,iBADd,CAEI,EAAE,CAAEA,YAFR,CAGI,IAAI,CAAC,UAHT,CAII,IAAI,CAAC,eAJT,CAKI,OAAO,CAAED,kBAAkB,CAACG,QAAnB,CAA4BF,YAA5B,EAA4C,IAA5C,CAAmD,KALhE,CAMI,QAAQ,CAAEC,WANd,EADJ,cASI,YAAK,SAAS,CAAC,iBAAf,uBACI,KAAC,UAAD,IADJ,EATJ,cAYI,cAAO,SAAS,CAAC,iBAAjB,CAAmC,OAAO,CAAED,YAA5C,UAA2DA,YAA3D,EAZJ,GADJ,CAgBH,CAxC0D,CAA3D,CA0CA,cAAeH,CAAAA,gBAAf","sourcesContent":["import { toJS } from \"mobx\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { ICategory } from \"../../../interfaces/ICategory\";\r\nimport FiltersSettingsState from \"../../../store/FiltersSettingsState\";\r\nimport \"./CheckboxCategory.scss\";\r\nimport \"../checbox.scss\";\r\nimport MarkerIcon from \"../../svg/MarkerIcon\";\r\n\r\ninterface IInputCategory {\r\n    category: ICategory\r\n}\r\n\r\n\r\nconst CheckboxCategory: React.FC<IInputCategory> = observer(({ category }) => {\r\n\r\n    const { selectedCategories } = FiltersSettingsState\r\n\r\n    const { categoryName } = category\r\n\r\n    const addCategory = () => {\r\n        if (!selectedCategories.includes(category.categoryName)) {\r\n            FiltersSettingsState.setSelectedCategories([...selectedCategories.concat(category.categoryName)])\r\n        }\r\n\r\n        if (selectedCategories.includes(category.categoryName)) {\r\n            FiltersSettingsState.setSelectedCategories([...selectedCategories.concat(category.categoryName)])\r\n            FiltersSettingsState.setSelectedCategories(selectedCategories.filter((item) => {\r\n                return item != categoryName\r\n            }))\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"checkbox-wrapper\">\r\n            <input\r\n                className=\"visually-hidden\"\r\n                id={categoryName}\r\n                type=\"checkbox\"\r\n                name=\"category-item\"\r\n                checked={selectedCategories.includes(categoryName) ? true : false}\r\n                onChange={addCategory}\r\n            />\r\n            <div className=\"checkbox-border\">\r\n                <MarkerIcon />\r\n            </div>\r\n            <label className=\"filter-checkbox\" htmlFor={categoryName}>{categoryName}</label>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default CheckboxCategory;\r\n"]},"metadata":{},"sourceType":"module"}
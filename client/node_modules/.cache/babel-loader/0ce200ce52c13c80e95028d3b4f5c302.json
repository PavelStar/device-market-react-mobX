{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pavel\\\\Desktop\\\\js\\\\device-market-master\\\\client\\\\src\\\\components\\\\LoginPopup\\\\LoginPopup.tsx\",\n    _s = $RefreshSig$();\n\nimport { observer } from \"mobx-react-lite\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport LoginState from \"../../store/LoginState\";\nimport CloseBtn from \"../svg/CloseBtn\";\nimport SubmitBtn from \"../buttons/SubmitBtn/SubmitBtn\";\nimport { ScrollLockOnFixed } from \"../../Utils/ScrollLockOnFixed\";\nimport \"./LoginPopup.scss\";\nimport { addUserToDB } from \"../../Utils/addUserToDB\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPopup = observer(_c = _s(_ref => {\n  _s();\n\n  let {\n    headerRef\n  } = _ref;\n  const {\n    userName,\n    userPassword,\n    isPopupShown\n  } = LoginState;\n  const overlayRef = useRef(null);\n  const closeBtnRef = useRef(null);\n  const loginRef = useRef(null);\n  const loginPopupRef = useRef(null);\n  const [isPassShown, setIsPassShown] = useState(false);\n  const [loginValue, setLoginValue] = useState('');\n  const [passwordValue, setPasswordValue] = useState('');\n  useEffect(() => {\n    if (headerRef) {\n      ScrollLockOnFixed(\"disabled\", headerRef);\n    }\n\n    return () => {\n      ScrollLockOnFixed(\"enabled\", headerRef);\n    };\n  }, []);\n  useEffect(() => {\n    if (isPopupShown) {\n      loginRef.current.focus();\n    }\n  }, [isPopupShown]);\n\n  const closePopup = e => {\n    if (overlayRef.current === e.target || closeBtnRef.current === e.target) {\n      LoginState.setIsPopupShown(!isPopupShown);\n    }\n  };\n\n  const inputHandleChange = e => {\n    if (e.currentTarget.id === \"login-field\") {\n      setLoginValue(e.currentTarget.value);\n    }\n\n    if (e.currentTarget.id === \"password-field\") {\n      setPasswordValue(e.currentTarget.value);\n    }\n  };\n\n  const showPassword = () => {\n    setIsPassShown(!isPassShown);\n  };\n\n  const userLogIned = () => {\n    if (loginValue && passwordValue) {// LoginState.setUserName(loginValue)\n      // LoginState.setUserPassword(passwordValue)\n    }\n\n    addUserToDB(loginValue, passwordValue);\n  };\n\n  const onOverlayClick = e => {\n    if (e.target === overlayRef.current) {\n      LoginState.setIsPopupShown(!isPopupShown);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-popup\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: overlayRef,\n      className: \"login-popup__overlay\",\n      onClick: onOverlayClick,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"login-popup__form\",\n        ref: loginPopupRef,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => closePopup(e),\n          ref: closeBtnRef,\n          type: \"button\",\n          className: \"login-popup__close-btn\",\n          children: /*#__PURE__*/_jsxDEV(CloseBtn, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), userName && userPassword ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"login-popup__success\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u0412\\u044B \\u0432\\u043E\\u0448\\u043B\\u0438 \\u043F\\u043E\\u0434 \\u0438\\u043C\\u0435\\u043D\\u0435\\u043C \", userName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"login-popup__login-wrap\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"login-popup__title\",\n            children: \"\\u0412\\u0445\\u043E\\u0434\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"login-popup__fields-wrap\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"login-popup__input-wrap\",\n              htmlFor: \"login-field\",\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"\\u041B\\u043E\\u0433\\u0438\\u043D:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                ref: loginRef,\n                className: \"login-popup__input\",\n                type: \"text\",\n                onChange: e => inputHandleChange(e),\n                value: loginValue,\n                placeholder: \"\\u041F\\u0440\\u0438\\u043C\\u0435\\u0440: user123\",\n                id: \"login-field\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"login-popup__input-wrap\",\n              htmlFor: \"password-field\",\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"login-popup__input\",\n                type: isPassShown ? \"text\" : \"password\",\n                onChange: e => inputHandleChange(e),\n                value: passwordValue,\n                placeholder: \"\\u041F\\u0440\\u0438\\u043C\\u0435\\u0440: Password1234\",\n                id: \"password-field\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"login-popup__show-pass-wrap\",\n                htmlFor: \"show-password\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  onClick: showPassword,\n                  type: \"checkbox\",\n                  id: \"show-password\",\n                  checked: isPassShown,\n                  onChange: () => setIsPassShown(!isPassShown)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"login-popup__btns-wrap\",\n            children: /*#__PURE__*/_jsxDEV(SubmitBtn, {\n              userLogIned: userLogIned\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}, \"CcTto7eJ55Y975wSaqKjJBWYCz0=\"));\n_c2 = LoginPopup;\nexport default LoginPopup;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LoginPopup$observer\");\n$RefreshReg$(_c2, \"LoginPopup\");","map":{"version":3,"sources":["C:/Users/Pavel/Desktop/js/device-market-master/client/src/components/LoginPopup/LoginPopup.tsx"],"names":["observer","React","useEffect","useRef","useState","LoginState","CloseBtn","SubmitBtn","ScrollLockOnFixed","addUserToDB","LoginPopup","headerRef","userName","userPassword","isPopupShown","overlayRef","closeBtnRef","loginRef","loginPopupRef","isPassShown","setIsPassShown","loginValue","setLoginValue","passwordValue","setPasswordValue","current","focus","closePopup","e","target","setIsPopupShown","inputHandleChange","currentTarget","id","value","showPassword","userLogIned","onOverlayClick"],"mappings":"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","sourcesContent":["import { observer } from \"mobx-react-lite\";\r\nimport React, { RefObject, useEffect, useRef, useState } from \"react\";\r\nimport LoginState from \"../../store/LoginState\";\r\nimport CloseBtn from \"../svg/CloseBtn\";\r\nimport SubmitBtn from \"../buttons/SubmitBtn/SubmitBtn\";\r\nimport { ScrollLockOnFixed } from \"../../Utils/ScrollLockOnFixed\";\r\nimport \"./LoginPopup.scss\";\r\nimport { addUserToDB } from \"../../Utils/addUserToDB\";\r\n\r\n\r\nconst LoginPopup = observer(({ headerRef }: { headerRef: RefObject<HTMLDivElement> }) => {\r\n\r\n    const { userName, userPassword, isPopupShown } = LoginState\r\n\r\n    const overlayRef = useRef(null);\r\n    const closeBtnRef = useRef(null);\r\n    const loginRef: any = useRef(null);\r\n    const loginPopupRef = useRef(null);\r\n\r\n    const [isPassShown, setIsPassShown] = useState(false)\r\n    const [loginValue, setLoginValue] = useState('')\r\n    const [passwordValue, setPasswordValue] = useState('')\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (headerRef) {\r\n\r\n            ScrollLockOnFixed(\"disabled\", headerRef)\r\n        }\r\n\r\n        return () => {\r\n            ScrollLockOnFixed(\"enabled\", headerRef)\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if (isPopupShown) {\r\n            loginRef.current.focus();\r\n        }\r\n\r\n    }, [isPopupShown]);\r\n\r\n    const closePopup = (e: any) => {\r\n        if (overlayRef.current === e.target || closeBtnRef.current === e.target) {\r\n            LoginState.setIsPopupShown(!isPopupShown);\r\n        }\r\n    };\r\n\r\n    const inputHandleChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.id === \"login-field\") {\r\n            setLoginValue(e.currentTarget.value);\r\n        }\r\n        if (e.currentTarget.id === \"password-field\") {\r\n            setPasswordValue(e.currentTarget.value);\r\n        }\r\n    };\r\n\r\n    const showPassword = () => {\r\n        setIsPassShown(!isPassShown);\r\n    };\r\n\r\n    const userLogIned = () => {\r\n        if (loginValue && passwordValue) {\r\n            // LoginState.setUserName(loginValue)\r\n            // LoginState.setUserPassword(passwordValue)\r\n        }\r\n        addUserToDB(loginValue, passwordValue)\r\n    };\r\n\r\n    const onOverlayClick = (e: any) => {\r\n        if (e.target === overlayRef.current) {\r\n            LoginState.setIsPopupShown(!isPopupShown)\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"login-popup\" >\r\n            <div ref={overlayRef} className=\"login-popup__overlay\"\r\n                onClick={onOverlayClick}\r\n            >\r\n                <form className=\"login-popup__form\" ref={loginPopupRef}>\r\n                    <button\r\n                        onClick={(e) => closePopup(e)}\r\n                        ref={closeBtnRef}\r\n                        type=\"button\"\r\n                        className=\"login-popup__close-btn\"\r\n                    >\r\n                        <CloseBtn />\r\n                    </button>\r\n                    {userName && userPassword ? (\r\n                        <div className=\"login-popup__success\">\r\n                            <p>Вы вошли под именем {userName}</p>\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"login-popup__login-wrap\">\r\n                            <h3 className=\"login-popup__title\">Вход</h3>\r\n                            <div className=\"login-popup__fields-wrap\">\r\n                                <label className=\"login-popup__input-wrap\" htmlFor=\"login-field\">\r\n                                    <b>Логин:</b>\r\n                                    <input\r\n                                        ref={loginRef}\r\n                                        className=\"login-popup__input\"\r\n                                        type=\"text\"\r\n                                        onChange={(e) => inputHandleChange(e)}\r\n                                        value={loginValue}\r\n                                        placeholder=\"Пример: user123\"\r\n                                        id=\"login-field\"\r\n                                    />\r\n                                </label>\r\n                                <label className=\"login-popup__input-wrap\" htmlFor=\"password-field\">\r\n                                    <b>Пароль:</b>\r\n                                    <input\r\n                                        className=\"login-popup__input\"\r\n                                        type={isPassShown ? \"text\" : \"password\"}\r\n                                        onChange={(e) => inputHandleChange(e)}\r\n                                        value={passwordValue}\r\n                                        placeholder=\"Пример: Password1234\"\r\n                                        id=\"password-field\"\r\n                                    />\r\n                                    <label className=\"login-popup__show-pass-wrap\" htmlFor=\"show-password\">\r\n                                        <input\r\n                                            onClick={showPassword}\r\n                                            type=\"checkbox\"\r\n                                            id=\"show-password\"\r\n                                            checked={isPassShown}\r\n                                            onChange={() => setIsPassShown(!isPassShown)}\r\n                                        />\r\n                                        <span>Показать пароль</span>\r\n                                    </label>\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"login-popup__btns-wrap\">\r\n                                <SubmitBtn userLogIned={userLogIned} />\r\n                                {/* <a className=\"login-popup__registration-btn\" type=\"button\">\r\n                                    Зарегистрироваться\r\n                                </a> */}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default LoginPopup"]},"metadata":{},"sourceType":"module"}
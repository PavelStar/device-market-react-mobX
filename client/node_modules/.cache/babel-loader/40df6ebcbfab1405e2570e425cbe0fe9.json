{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pavel\\\\Desktop\\\\js\\\\device-market-master\\\\client\\\\src\\\\components\\\\Product\\\\ProductSelects\\\\ProductSelects.tsx\",\n    _s = $RefreshSig$();\n\nimport { observer } from \"mobx-react-lite\";\nimport { useEffect, useState } from \"react\";\nimport ProductSelectsState from \"../../../store/ProductSelectsState\";\nimport ResponseDataState from \"../../../store/ResponseDataState\";\nimport ColorSelect from \"./ColorSelect/ColorSelect\";\nimport MemorySelect from \"./MemorySelect/MemorySelect\";\nimport \"./ProductSelects.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ProductSelects = observer(_c = _s(_ref => {\n  _s();\n\n  let {\n    product\n  } = _ref;\n  const {\n    responseData\n  } = ResponseDataState;\n  const {\n    selectedColor,\n    selectedMemory,\n    selectedTitle\n  } = ProductSelectsState;\n  const {\n    id,\n    color,\n    title\n  } = product;\n  const [productsWithSameTitle, setProductsWithSameTitle] = useState();\n  const [colorsList, setColorsList] = useState();\n  const [memoryList, setMemoryList] = useState();\n  useEffect(() => {\n    // поиск товаров с таким же заголовком\n    responseData && setProductsWithSameTitle(responseData.items.filter(item => item.title === product.title));\n    console.log('selects parent');\n  }, []);\n  useEffect(() => {\n    let colors = []; // поиск всех цветов и фильтрация от дубликатов \n\n    productsWithSameTitle && productsWithSameTitle.forEach(item => {\n      if (title === item.title && !colors.includes(item.color)) {\n        colors.push(item.color);\n      }\n    });\n    setColorsList(colors);\n    let memories = []; // поиск всех объемов памяти для данного цвета\n\n    productsWithSameTitle && productsWithSameTitle.forEach(item => {\n      if (title === item.title && color === item.color) {\n        memories.push(item.features.memory);\n      }\n    });\n    console.log('memories', memories);\n    setMemoryList(memories);\n  }, [productsWithSameTitle]);\n\n  const onSelectHandleChange = (selectValue, selectType) => {\n    if (selectType === 'color') {\n      // console.log('цвет - ', selectValue, 'объем памяти - ', product.features.memory)\n      console.log(productsWithSameTitle === null || productsWithSameTitle === void 0 ? void 0 : productsWithSameTitle.find(item => item.color === selectValue && item.features.memory === product.features.memory));\n    }\n\n    if (selectType === 'memory') {\n      console.log('цвет - ', product.color, 'объем памяти - ', selectValue);\n    } //         if (item.title === product.title && item.features.memory === memory && item.color === selectedColor) {\n    // \n    //         }\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"product-selects\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"product-selects__inner\",\n      children: colorsList && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ColorSelect, {\n          colorsList: colorsList,\n          onSelectHandleChange: onSelectHandleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this), product.features.memory && memoryList && /*#__PURE__*/_jsxDEV(MemorySelect, {\n          memoryList: memoryList,\n          onSelectHandleChange: onSelectHandleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 67\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}, \"rFr/d69JR8QNcEaBWDxgdTKl84Q=\"));\n_c2 = ProductSelects;\nexport default ProductSelects;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ProductSelects$observer\");\n$RefreshReg$(_c2, \"ProductSelects\");","map":{"version":3,"sources":["C:/Users/Pavel/Desktop/js/device-market-master/client/src/components/Product/ProductSelects/ProductSelects.tsx"],"names":["observer","useEffect","useState","ProductSelectsState","ResponseDataState","ColorSelect","MemorySelect","ProductSelects","product","responseData","selectedColor","selectedMemory","selectedTitle","id","color","title","productsWithSameTitle","setProductsWithSameTitle","colorsList","setColorsList","memoryList","setMemoryList","items","filter","item","console","log","colors","forEach","includes","push","memories","features","memory","onSelectHandleChange","selectValue","selectType","find"],"mappings":"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","sourcesContent":["import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { IItemData } from \"../../../interfaces/IItemData\";\r\nimport ProductSelectsState from \"../../../store/ProductSelectsState\";\r\nimport ResponseDataState from \"../../../store/ResponseDataState\";\r\nimport ColorSelect from \"./ColorSelect/ColorSelect\";\r\nimport MemorySelect from \"./MemorySelect/MemorySelect\";\r\nimport \"./ProductSelects.scss\";\r\n\r\nconst ProductSelects = observer(({ product }: { product: IItemData }) => {\r\n\r\n    const { responseData } = ResponseDataState;\r\n    const { selectedColor, selectedMemory, selectedTitle } = ProductSelectsState;\r\n    const { id, color, title } = product;\r\n\r\n    const [productsWithSameTitle, setProductsWithSameTitle] = useState<IItemData[] | undefined>()\r\n    const [colorsList, setColorsList] = useState<string[] | undefined>();\r\n    const [memoryList, setMemoryList] = useState<string[] | undefined>();\r\n\r\n\r\n    useEffect(() => {\r\n        // поиск товаров с таким же заголовком\r\n        responseData && setProductsWithSameTitle(responseData.items.filter(item => item.title === product.title))\r\n\r\n        console.log('selects parent')\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let colors: string[] = [];\r\n        // поиск всех цветов и фильтрация от дубликатов \r\n        productsWithSameTitle && productsWithSameTitle.forEach((item: IItemData) => {\r\n            if (title === item.title && !colors.includes(item.color)) {\r\n                colors.push(item.color);\r\n            }\r\n        });\r\n\r\n        setColorsList(colors)\r\n\r\n        let memories: string[] = [];\r\n        // поиск всех объемов памяти для данного цвета\r\n        productsWithSameTitle && productsWithSameTitle.forEach((item: IItemData) => {\r\n            if (title === item.title && color === item.color) {\r\n                memories.push(item.features.memory);\r\n            }\r\n        });\r\n        console.log('memories', memories)\r\n        setMemoryList(memories)\r\n\r\n    }, [productsWithSameTitle])\r\n\r\n\r\n    const onSelectHandleChange = (selectValue: string, selectType: string) => {\r\n\r\n        if (selectType === 'color') {\r\n            // console.log('цвет - ', selectValue, 'объем памяти - ', product.features.memory)\r\n            console.log(productsWithSameTitle?.find(item => item.color === selectValue && item.features.memory === product.features.memory))\r\n\r\n        }\r\n\r\n        if (selectType === 'memory') {\r\n            console.log('цвет - ', product.color, 'объем памяти - ', selectValue)\r\n\r\n        }\r\n\r\n        //         if (item.title === product.title && item.features.memory === memory && item.color === selectedColor) {\r\n        // \r\n        //         }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"product-selects\">\r\n            <div className=\"product-selects__inner\">\r\n                {colorsList &&\r\n                    <>\r\n                        <ColorSelect colorsList={colorsList} onSelectHandleChange={onSelectHandleChange} />\r\n                        {product.features.memory && memoryList && <MemorySelect memoryList={memoryList} onSelectHandleChange={onSelectHandleChange} />}\r\n                    </>}\r\n                {/* {colorsList && <ColorSelect colorsList={colorsList} />} */}\r\n                {/* {product.features.memory && <MemorySelect product={product} />} */}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default ProductSelects;\r\n"]},"metadata":{},"sourceType":"module"}